{"version":3,"file":"static/js/904.c063cdc9.chunk.js","mappings":"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","sources":["components/ContactForm/validationForm.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const validationForm = Yup.object().shape({\n  name: Yup.string()\n    .min(2)\n    .max(50)\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      'only letters'\n    )\n    .required(),\n  number: Yup.number().min(8).required(),\n});","import Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectorAuth, selectorContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/operation.contacts';\nimport { Alert, Button } from '@mui/material';\nimport { tokenId } from 'http';\nimport { useFormik } from 'formik';\nimport { validationForm } from './validationForm';\n\nexport const ContactForm = memo(() => {\n  const { token, user } = useSelector(selectorAuth);\n  const dispatch = useDispatch();\n  const stateContacts = useSelector(selectorContacts);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: validationForm,\n    onSubmit: values => {\n      if (\n        stateContacts.items.some(\n          el =>\n            el.name.toLowerCase().trim() === values.name.toLowerCase().trim()\n        )\n      )\n        return alert(`${values.name} is already in contacts`);\n      if (token && user.email) {\n        tokenId.set(token);\n      }\n      dispatch(addContact(values));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <>\n      {formik.errors.name && formik.touched.name ? (\n        <Alert severity=\"error\">Error, please enter a valid name value</Alert>\n      ) : null}\n      {formik.errors.number && formik.touched.number ? (\n        <Alert severity=\"error\">Error, please enter a valid number value</Alert>\n      ) : null}\n      <Box\n        component=\"form\"\n        sx={{\n          '& > :not(style)': { m: 1, width: '25ch' },\n        }}\n        onSubmit={formik.handleSubmit}\n        autoComplete=\"off\"\n      >\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"Name\"\n          name=\"name\"\n          onChange={formik.handleChange}\n          value={formik.values.name}\n        />\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"Number\"\n          name=\"number\"\n          onChange={formik.handleChange}\n          value={formik.values.number}\n        />\n        <Button variant=\"contained\" type=\"submit\" size=\"medium\">\n          Add contact\n        </Button>\n      </Box>\n    </>\n  );\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ContactItem_listItem__NSSYk\",\"btnDelete\":\"ContactItem_btnDelete__edqzG\"};","import css from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation.contacts';\nimport { Button, Grid, Paper, Typography } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  return (\n    <Grid item component=\"li\" sx={{ marginBottom: '15px', width: '100%' }}>\n      <Paper\n        elevation={2}\n        className={css.listItem}\n        sx={{ bgcolor: '#8cbff860' }}\n      >\n        <Typography sx={{ fontSize: '22px' }} variant=\"body1\" component=\"p\">\n          {name}: {number}\n        </Typography>\n        <Button\n          className={css.btnDelete}\n          variant=\"outlined\"\n          startIcon={<DeleteIcon />}\n          type=\"button\"\n          onClick={() => {\n            dispatch(deleteContact(id));\n          }}\n        >\n          Delete\n        </Button>\n      </Paper>\n    </Grid>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { ContactItem } from '../ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { filterContactsByName } from 'redux/selectors';\nimport { Grid } from '@mui/material';\n\nexport const ContactList = () => {\n  const filterContacts = useSelector(filterContactsByName);\n\n  return (\n    <Grid container component=\"ul\">\n      {filterContacts.map(item => (\n        <ContactItem key={item.id} {...item} />\n      ))}\n    </Grid>\n  );\n};\n","import { TextField } from '@mui/material';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <TextField\n      id=\"outlined-textarea\"\n      type=\"text\"\n      label=\"Find contacts by name\"\n      name=\"filter\"\n      onChange={event => dispatch(changeFilter(event.target.value))}\n      multiline\n    />\n  );\n};\n","import { Box, Container, Paper } from '@mui/material';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { tokenId } from 'http';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation.contacts';\nimport {\n  selectorAuth,\n  selectorContacts,\n  selectorFilter,\n} from 'redux/selectors';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const search = useSelector(selectorFilter);\n  const { isLoading, error } = useSelector(selectorContacts);\n  const { token, user } = useSelector(selectorAuth);\n\n  useEffect(() => {\n    if (token && user.email) {\n      tokenId.set(token);\n      dispatch(fetchContacts(search));\n    }\n  }, [token, user.email, dispatch, search]);\n\n  if (error) return <p>Download error</p>;\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box\n        sx={{\n          p: '30px 0',\n        }}\n      >\n        <Paper\n          elevation={3}\n          sx={{\n            p: '20px 20px',\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '20px',\n            textAlign: 'center',\n            bgcolor: '#558bc820',\n          }}\n        >\n          <h1>Phonebook</h1>\n          <ContactForm />\n          <h2>Contacts</h2>\n          <Filter />\n          {isLoading ? <Loader /> : <ContactList />}\n        </Paper>\n      </Box>\n    </Container>\n  );\n};\n"],"names":["validationForm","Yup","shape","name","min","max","matches","required","number","ContactForm","memo","useSelector","selectorAuth","token","user","dispatch","useDispatch","stateContacts","selectorContacts","formik","useFormik","initialValues","validationSchema","onSubmit","values","items","some","el","toLowerCase","trim","alert","email","tokenId","addContact","resetForm","errors","touched","Alert","severity","Box","component","sx","m","width","handleSubmit","autoComplete","TextField","id","label","onChange","handleChange","value","Button","variant","type","size","ContactItem","Grid","item","marginBottom","Paper","elevation","className","css","bgcolor","Typography","fontSize","startIcon","Delete","onClick","deleteContact","ContactList","filterContacts","filterContactsByName","container","map","Filter","event","changeFilter","target","multiline","Contacts","search","selectorFilter","isLoading","error","useEffect","fetchContacts","Container","maxWidth","p","display","flexDirection","gap","textAlign","Loader"],"sourceRoot":""}